<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on 空樹之空的博客</title><link>/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</link><description>Recent content in 设计模式 on 空樹之空的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;a href='https://www.sgfoot.com'>空樹之空&lt;/a></copyright><lastBuildDate>Thu, 06 May 2021 16:40:10 +0800</lastBuildDate><atom:link href="/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>再述 SOLID 原则</title><link>/again-solid.html</link><pubDate>Thu, 06 May 2021 16:40:10 +0800</pubDate><guid>/again-solid.html</guid><description>再述 SOLID 原则，因为这些原则是设计模式的基石，所有的模式都是基于这些原则展开的。 单一职责原则 经典定义：应该有且仅有一个原因引起”类“的变更。(不</description></item><item><title>设计模式-设计原则与思想总结(二十)</title><link>/gof-think-summary.html</link><pubDate>Fri, 26 Feb 2021 21:12:54 +0800</pubDate><guid>/gof-think-summary.html</guid><description>编写高质量代码 代码质量评判标准 面向对象 设计原则 规范与重构 以上脑图来自极客时间 关于我 我的博客：https://www.sgfoot.com 欢迎</description></item><item><title>设计模式-重构-15条编程规范(十九)</title><link>/gof-refactor-4.html</link><pubDate>Mon, 22 Feb 2021 19:48:31 +0800</pubDate><guid>/gof-refactor-4.html</guid><description>为什么要编程规范 构建一个大型项目，往往是很多人一起参与，堆砌的代码行数都是成千上万行。如何保证代码的健壮性？编程规范必不可少。 命名 命名能力体</description></item><item><title>设计模式-重构-解耦(十八)</title><link>/gof-refactor-3.html</link><pubDate>Sat, 20 Feb 2021 21:22:55 +0800</pubDate><guid>/gof-refactor-3.html</guid><description>解耦为何如此重要 解耦是保证代码的松耦合，高内聚。防止代码质量腐化到不可救药地步的有效手段。 代码”高内聚，松耦合“也就意味着，代码结构清晰，分</description></item><item><title>设计模式-重构-单元测试(十七)</title><link>/gof-refactor-2.html</link><pubDate>Fri, 19 Feb 2021 21:06:22 +0800</pubDate><guid>/gof-refactor-2.html</guid><description>什么是单元测试 单元测试是代码层面的测试，由研发自己来编写，用于测试“自己”编写的代码逻辑的正确性。 单元测试主要测试范围： 类 函数 单元测试有别于</description></item><item><title>设计模式-重构(十六)</title><link>/gof-refactor-1.html</link><pubDate>Thu, 18 Feb 2021 19:48:20 +0800</pubDate><guid>/gof-refactor-1.html</guid><description>纲要 3W1H why 为什么重构 what 重构什么 when 什么时候重构 how 如何重构 重构的定义 软件设计大师 Martin Fowler 这样定义重构： “重构是一种对软件内部结构的改善，目的是在不改变</description></item><item><title>设计模式-通用系统开发(十五)</title><link>/gof-common-dev.html</link><pubDate>Wed, 10 Feb 2021 17:37:59 +0800</pubDate><guid>/gof-common-dev.html</guid><description>针对非业务通用框架开发，需要做到尽量通用，适合百变的场景，做到良好的扩展。 需求分析 功能性需求分析 满足使用者的需求，尽量通用。 借助设计产品线框</description></item><item><title>设计模式-业务系统开发(十四)</title><link>/gof-business-dev.html</link><pubDate>Wed, 10 Feb 2021 15:13:23 +0800</pubDate><guid>/gof-business-dev.html</guid><description>纲要 完整的系统流程包括： 前期的需求沟通分析 中期的代码设计实现 后期的系统上线维护 需求分析 做为技术人员不仅仅是等着产品设计文档，线框图，照着实现</description></item><item><title>设计模式-KISS,YAGNI,DRY,LOD 原则(十三)</title><link>/gof-principle-other.html</link><pubDate>Mon, 08 Feb 2021 12:21:28 +0800</pubDate><guid>/gof-principle-other.html</guid><description>纲要 KISS原则 Keep It Simple and Stupid 尽量保持简单 代码行数越少就越“简单”吗？ 答案是否定的，实现逻辑需要简单，易维护，不过度优化 代码逻辑复杂就违背 Kiss 原则</description></item><item><title>设计模式-控制反转IOC.Go实例(十二)</title><link>/gof-ioc-code.html</link><pubDate>Mon, 08 Feb 2021 11:23:01 +0800</pubDate><guid>/gof-ioc-code.html</guid><description>控制反转(IOC) Inversion Of Control “控制”是指对程序执行流程的控制 ”反转“ 指没有使用框架之前，程序员自己控制整个程序的执行。在使用框架之后，整个程序的</description></item><item><title>设计模式-依赖注入DI.Go实例(十一)</title><link>/gof-di-code.html</link><pubDate>Mon, 08 Feb 2021 11:22:56 +0800</pubDate><guid>/gof-di-code.html</guid><description>依赖注入(DI) Dependency Injection 不通过 new() 的方式在类内部创建依赖类对象，而是将依赖的类对象在外部创建好之后，通过构造函数，函数参数等方式传递（或注入）给类</description></item><item><title>设计模式-SOLID五大原则(十)</title><link>/gof-solid.html</link><pubDate>Mon, 25 Jan 2021 21:03:38 +0800</pubDate><guid>/gof-solid.html</guid><description>[TOC] SOLID原则包括单一职责，开闭原则，里氏替换原则，接口隔离原则，依赖倒置原则。 单一职责原则(SRP) SRP: Single Responsibility Principle A class or module should have a single repons</description></item><item><title>设计模式-充血模式(九)</title><link>/gof-ddd.html</link><pubDate>Thu, 14 Jan 2021 14:37:12 +0800</pubDate><guid>/gof-ddd.html</guid><description>充血模式即领域驱动设计(Domain Driven Design, 简称 DDD) 贫血模式 在之前我们写一篇关于贫血模式的文章, 点击查看. 贫血模式是目前主流的一种开发模式, 基于M</description></item><item><title>设计模式-接口组合(八)</title><link>/gof-interface-combination.html</link><pubDate>Mon, 11 Jan 2021 20:23:10 +0800</pubDate><guid>/gof-interface-combination.html</guid><description>有一种非常经典的设计原则: 组合优于继承, 多用组合少用继承 为什么少用继承 继承是面向对象的四大特性之一, 表示类之间的 is-a 关系. 支持多态特性, 可以解</description></item><item><title>设计模式-接口编程(七)</title><link>/gof-program-to-interface.html</link><pubDate>Mon, 11 Jan 2021 11:38:43 +0800</pubDate><guid>/gof-program-to-interface.html</guid><description>何为&amp;quot;接口&amp;quot;编程 基于接口而非实现编程. 英文: Program to an interface, not an implementation 这条原则是一条比较抽象,泛化的设计思想. 接口的本质: 接口就是一</description></item><item><title>设计模式-贫血模式(六)</title><link>/gof-mvc.html</link><pubDate>Fri, 08 Jan 2021 14:02:31 +0800</pubDate><guid>/gof-mvc.html</guid><description>贫血开发模式 传统的MVC结构分为: Model 层, Controller 层, View层. 而做为前后端分离的MVC变为后端被分为: Controller, Service, Model 层. Controller 层负责暴露接口给前端调用. Service 层</description></item><item><title>设计模式-封装,抽象,继承,多态的作用(五)</title><link>/gof-oop.html</link><pubDate>Thu, 07 Jan 2021 19:40:53 +0800</pubDate><guid>/gof-oop.html</guid><description>封装, 抽象, 继承, 多态 是面向对象编程语言的四大特性. 而它们又分别承担什么职责呢. 实际编程中起什么作用呢. 封装 (Encapsulation) 封装也称信息隐藏或者数据访问保</description></item><item><title>设计模式-学习地图(四)</title><link>/gof-map.html</link><pubDate>Mon, 04 Jan 2021 19:35:56 +0800</pubDate><guid>/gof-map.html</guid><description>学习之前先罗列一下学习框架地图. 方便今后的学习. 三种编程范式 面向过程 面向对象(最主流) 函数式编程(如go语言) 面向对象7大知识点 面向对象的四</description></item><item><title>设计模式-如何评价代码质量好坏?(三)</title><link>/gof-check-code.html</link><pubDate>Tue, 29 Dec 2020 20:56:04 +0800</pubDate><guid>/gof-check-code.html</guid><description>评价常用词汇 描述代码质量所有常用词汇 最常用的评价标准 评价属于主观, 主观的准确度与工程师自身经验有极大的关系. 接下来我们从以下几个维度评价代码</description></item><item><title>设计模式-七大原则(二)</title><link>/gof-seven-principle.html</link><pubDate>Wed, 19 Aug 2020 13:00:55 +0800</pubDate><guid>/gof-seven-principle.html</guid><description>用最少的语言记住更多的东西 本文提纲 设计模式的目的 高内聚，低耦合 可重用性 可扩展性 可阅读性 可靠性 1. 单一职责原则(SRP) 单一职责原则提出了一个编</description></item><item><title>设计模式-简介(一)</title><link>/gof.html</link><pubDate>Wed, 19 Aug 2020 11:39:20 +0800</pubDate><guid>/gof.html</guid><description>什么是设计模式 设计模式 (Design pattern) 代表了最佳实践 通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解</description></item></channel></rss>