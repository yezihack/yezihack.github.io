<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 空樹之空的博客</title><link>/categories/golang.html</link><description>Recent content in golang on 空樹之空的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;a href='https://www.sgfoot.com'>空樹之空&lt;/a></copyright><lastBuildDate>Tue, 28 Sep 2021 20:35:09 +0800</lastBuildDate><atom:link href="/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Awesome Go</title><link>/awesome-go.html</link><pubDate>Tue, 28 Sep 2021 20:35:09 +0800</pubDate><guid>/awesome-go.html</guid><description>收录极好的Golang库及框架，也是本人使用过，认为不错的。分享给大家。 框架类 名称 网址 Gin Web 框架 https://github.com/gin-gonic/gin Colly 爬虫框架 https://github.com/gocolly/colly 工具类 名称 网址 Gjson 动态获取JSON</description></item><item><title>Systemd 管理 Golang 进程</title><link>/systemd-golang.html</link><pubDate>Mon, 15 Mar 2021 20:13:44 +0800</pubDate><guid>/systemd-golang.html</guid><description>systemd 脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/bin/bash project_name=&amp;#34;mygo&amp;#34; project_path=&amp;#34;/data/backend/&amp;#34; exec_path=&amp;#34;${project_path}${project_name}&amp;#34; cat &amp;gt; /lib/systemd/system/${project_name}.service &amp;lt;&amp;lt; EOF [Unit] Description=mygo systemd Documentation=https://www.sgfoot.com After=network.target [Service] Type=simple User=root # 启动命令 ExecStart=${exec_path} # 重启命令 ExecReload=/bin/kill -SIGINT # 环境变量 Environment=&amp;#34;SGFOOT_ENV=pro&amp;#34;</description></item><item><title>Golang err is shadowed during return</title><link>/fix-golang-return.html</link><pubDate>Thu, 24 Dec 2020 16:11:38 +0800</pubDate><guid>/fix-golang-return.html</guid><description>复现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import &amp;#34;errors&amp;#34; func main() { TestErr(&amp;#34;go&amp;#34;, &amp;#34;golang&amp;#34;) } func TestErr(t, p string) (s string, err error) { switch t { case &amp;#34;go&amp;#34;: err := check(p) if err != nil { // 返回参数里的 err 作</description></item><item><title>Go Mod 引用私有仓库</title><link>/go-mod-private.html</link><pubDate>Fri, 30 Oct 2020 16:01:25 +0800</pubDate><guid>/go-mod-private.html</guid><description>在做 go 开发, 如果是使用 go1.11 版本, 相信大家都会使用到 go mod 做为依赖管理, 因为 go mod 可以设置代理,国外的包,轻松下载. 但是在某一天你使用公司自建的 gitlab ,</description></item><item><title>Go 并发</title><link>/go-concurrence.html</link><pubDate>Thu, 06 Aug 2020 12:01:45 +0800</pubDate><guid>/go-concurrence.html</guid><description>golang 天生语言层面支持并发, 非常棒的语言, 有时我们业务开发时, 遇到复杂场景, 需要用于并发, 将多个请求使用协程组完成并发, 当遇到嵌套循环,还存在上</description></item><item><title>Go 字符串指纹</title><link>/go-fingerprint.html</link><pubDate>Wed, 05 Aug 2020 15:34:32 +0800</pubDate><guid>/go-fingerprint.html</guid><description>写项目时,有时我们需要缓存, 缓存就会需要唯一的key. 常规是对字符串求md5指纹. 在golang里我们也可以使用, 目前可以计算一个字符串的c</description></item><item><title>Cobra使用说明</title><link>/cobra.html</link><pubDate>Tue, 07 Jul 2020 18:54:40 +0800</pubDate><guid>/cobra.html</guid><description>Cobra 概念 Cobra有三个基本概念commands,arguments和flags。 commands代表行为 arguments代表数值 flags</description></item><item><title>zerolog 占大量内存剖析</title><link>/optimize-zerolog.html</link><pubDate>Wed, 01 Jul 2020 19:06:01 +0800</pubDate><guid>/optimize-zerolog.html</guid><description>分析过程 使用 pprof top分析 可见 json.Marshal占第一内存. 为什么呢? 我们进一步分析 使用 tree 分析 查看到 zerolog AppendInterface 方法占用 73.32%的内存量. 而</description></item><item><title>Golang 单元测试/性能测试</title><link>/golang-test.html</link><pubDate>Tue, 30 Jun 2020 14:23:04 +0800</pubDate><guid>/golang-test.html</guid><description>参考 Go 单元测试/性能测试 性能测试 1 go test -test.bench=. -test.benchmem 指定方法 1 go test -test.bench=MyFunc -test.benchmem cpu 性能分析 1 go test -test.bench=MyFunc -test.cpuprofile cpu.out 内存分析 1 go test -test.bench=MyFunc -test.memprofile mem.out goroutine 阻塞分析 1 go test -test.bench=MyFunc -test.blockprofile block.out ### 指定几个cpu</description></item><item><title>Gin_validator</title><link>/gin_validator.html</link><pubDate>Mon, 15 Jun 2020 18:35:49 +0800</pubDate><guid>/gin_validator.html</guid><description>gin 自带验证器 参考文档: https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Baked_In_Validators_and_Tags gin 是个优秀的web框架, 集大成于一身. 对于参数的验证可以进行过滤. gin是引用了 go-playground框架, 今天</description></item><item><title>golang http句柄泄露</title><link>/curl.html</link><pubDate>Thu, 11 Jun 2020 14:36:27 +0800</pubDate><guid>/curl.html</guid><description>前言 平时我们做Web开发, 经常会遇到需要请求网络资源,使用http请求, 如下面代码,注释处如果没有打开话,会导致句柄泄露, 最终报: dial tcp 127.0.0.1:80: socket: too</description></item><item><title>pprof火焰图分析利器之压测</title><link>/benchmark.html</link><pubDate>Tue, 09 Jun 2020 11:21:11 +0800</pubDate><guid>/benchmark.html</guid><description>Benchmark 新建测试文件 util.go文件 1 2 3 4 5 6 7 8 9 10 11 func GetMd5V(s string) string { h := md5.New() h.Write([]byte(s)) return hex.EncodeToString(h.Sum(nil)) } func SumMd5(s string) string { data := []byte(s) return fmt.Sprintf(&amp;#34;%x&amp;#34;, md5.Sum(data)) } 以_test结尾的文件, 如util_t</description></item><item><title>pprof火焰图性能分析利器之入门</title><link>/pprof.html</link><pubDate>Fri, 05 Jun 2020 19:16:31 +0800</pubDate><guid>/pprof.html</guid><description>前言 如果你的应用是一直运行的，比如 web 应用，那么可以使用 net/http/pprof 库，它能够在提供 HTTP 服务进行分析。而非一直运行的程序可以使用 runtime/pprof 库 可以先看下pprof入</description></item><item><title>golang select用法</title><link>/select.html</link><pubDate>Fri, 05 Jun 2020 10:59:18 +0800</pubDate><guid>/select.html</guid><description>select 用于chan通道专用的控制结构 1 2 3 4 5 6 7 ch := make(chan bool) select { case c &amp;lt;- ch: fmt.Println(&amp;#34;hello world&amp;#34;) default: return } 使用误区 39行, return 会一直阻塞? 希望大神解释下? 答: return相</description></item><item><title>Goz学习笔记</title><link>/goz.html</link><pubDate>Tue, 28 Apr 2020 20:33:51 +0800</pubDate><guid>/goz.html</guid><description>分析 项目四个Go文件, 每个文件仅描述一件事, 思路非常清淅, 故此学习并总结一下里面的精华. 定义Options结构体接受外部定义的配置 定义入口文</description></item></channel></rss>