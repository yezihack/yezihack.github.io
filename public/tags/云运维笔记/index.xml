<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>云运维笔记 on 空树之空</title>
    <link>https://yezihack.github.io/tags/%E4%BA%91%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 云运维笔记 on 空树之空</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Feb 2023 18:07:36 +0800</lastBuildDate><atom:link href="https://yezihack.github.io/tags/%E4%BA%91%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K8s 跨 Node 机器 Pod 网络异常</title>
      <link>https://yezihack.github.io/posts/k8s-bug-pod-network/</link>
      <pubDate>Tue, 07 Feb 2023 18:07:36 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/k8s-bug-pod-network/</guid>
      <description>背景 在 k8s 里部署了应用需要通过 ingress 提供外部调用. ingressController Pod 应用部署在 A 机器上, 应用部署在 B 机器上.
通过自定义域名调用应用,则需要经过自定义域名配置的 host 的 kube-proxy 到 IngressController Pod 机器,再由 Ingress 负载找到应用的 Service 负载的 endpoint.
最终请求到应用的 Pod.
环境 k8s: 1.19 docker: 19.10 linux: CentOS7.6 分析思路 先确定 host:port 端口是否通达？ 再确认 ingress 是否可以访问到 service IP ingress 关于作者 我的博客：https://yezihack.github.io
欢迎关注我的微信公众号【空树之空】，一日不学则面目可憎也，吾学也。</description>
    </item>
    
    <item>
      <title>云运维笔记(9) Kubernetes Pod 调度策略</title>
      <link>https://yezihack.github.io/posts/k8s-dispatch/</link>
      <pubDate>Fri, 16 Dec 2022 18:14:20 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/k8s-dispatch/</guid>
      <description>1.1. 四大调度方式 1.1.1. 自动调试 1.1.2. 定向调度 1.1.2.1. NodeName 1.1.2.2. NodeSelector 1.1.3. 亲和性调度 1.1.3.1. NodeAffinity 1.1.3.2. PodAffinity 1.1.3.3. PodAntiAffinity 1.1.4. 污点（容忍）调度 1.1.4.1. 污点 1.1.4.2. 容忍 1.2. 参考 关于作者 1.1. 四大调度方式 自动调度：运行在哪个节点上完全由Scheduler经过一系列的算法计算得出 定向调度：NodeName、NodeSelector 亲和性调度：NodeAffinity、PodAffinity、PodAntiAffinity 污点（容忍）调度：Taints、Toleration 1.1.1. 自动调试 完全交由 kube-scheduler 来决定 pod 调度到哪里，不受人为控制。
1.1.2. 定向调度 1.1.2.1. NodeName NodeName用于强制约束将Pod调度到指定的Name的Node节点上。这种方式，其实是直接跳过Scheduler的调度逻辑，直接将Pod调度到指定名称的节点。
使用实例：
apiVersion: v1 kind: Pod metadata: name: pod-nodename namespace: dev spec: nodeName: kube-11 # 指定调度到node1节点上 containers: - name: nginx image: nginx:1.17.1 tip: 这种调度不够灵活，必须指定某 node 节点，若 node 异常会导致调度失败。</description>
    </item>
    
    <item>
      <title>云运维笔记(8) Kubeadm 内网补丁版本升级，从v1.16.0至v1.16.15</title>
      <link>https://yezihack.github.io/posts/kubeadm-upgrade-v1.16/</link>
      <pubDate>Fri, 09 Dec 2022 16:26:37 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/kubeadm-upgrade-v1.16/</guid>
      <description>.1. 为什么升级 漏洞问题 使用新功能 .2. 特殊性 内网环境，没有外网。 多 master 集群。 外置 Etcd。 .3. 版本 kubeadm升级前版本：v1.16.0 kubeadm升级后版本：v1.16.15 .4. 升级前的检查 .4.1. 查看当前版本 kubeadm version kubeadm version: &amp;amp;version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;16&amp;#34;, GitVersion:&amp;#34;v1.16.0&amp;#34;, GitCommit:&amp;#34;72c30166b2105cd7d3350f2c28a219e6abcd79eb&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-01-18T23:29:13Z&amp;#34;, GoVersion:&amp;#34;go1.13.5&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;} .4.2. 离线下载 kubectl,kubeadm,kubelet 下载 # 必须本机没有安装以下软件 version=&amp;#34;1.16.15&amp;#34; yumdownloader --resolve --destdir=/opt/local-packages/ kubelet-${version} kubeadm-${version} kubectl-${version} .4.3. 制作共享 YUM 源 使用工具：saber
假定本机IP：192.168.10.10
# 安装 Createrepo yum install createrepo -y createrepo /opt/local-packages/ # 如果存在 repodata 则使用更新 createrepo --update /opt/local-packages/ # 共享文件 saber fs /opt/local-packages/ .</description>
    </item>
    
    <item>
      <title>云运维笔记(7) kubernetes 错误收集</title>
      <link>https://yezihack.github.io/posts/k8s-error/</link>
      <pubDate>Wed, 07 Dec 2022 11:31:00 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/k8s-error/</guid>
      <description>.1. 为什么 Kubernetes 众多组件汇集于一身，插件也是多如牛毛，在运维中或日常安装中难免会遇到各种各样的错误，有些错误并不好排查，让人火急火燎搜索一翻，半天已经过去。在此收集日常使用 kubernetes 遇到的问题。
.2. Ingress-nginx .2.1. Internal error occurred: failed calling webhook &amp;ldquo;validate.nginx.ingress.kubernetes.io&amp;rdquo; .2.1.1. 详细错误信息 Error from server (InternalError): error when creating &amp;#34;ingress.yaml&amp;#34;: Internal error occurred: failed calling webhook &amp;#34;validate.nginx.ingress.kubernetes.io&amp;#34;: Post &amp;#34;https://ingress-nginx-controller-admission.ingress-nginx.svc:443/networking/v1beta1/ingresses?timeout=10s&amp;#34;: context deadline exceeded .2.1.2. 解决方法 删除验证
# 查看 kubectl get validatingwebhookconfigurations # 删除 kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission .3. 关于作者 我的博客：https://yezihack.github.io
欢迎关注我的微信公众号【空树之空】，一日不学则面目可憎也，吾学也。</description>
    </item>
    
    <item>
      <title>云运维笔记(6) k1s 工具使用教程</title>
      <link>https://yezihack.github.io/posts/k1s/</link>
      <pubDate>Tue, 06 Dec 2022 16:46:57 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/k1s/</guid>
      <description>.1. k1s 是 kubectl 辅助工具 .2. 什么是 k1s .3. k1s 特色 .4. 安装 .5. 快速上手 .6. 功能 .6.1. Resources 列表( kubectl 系统对应) .6.2. Resources 列表(扩展功能) .6.3. Action 列表 .6.4. Extend 扩展功能 .6.5. 环境变量 .7. 使用说明 .7.1. 设置环境变量 .7.2. 日志查看 .7.3. 进入容器 .7.4. 资源操作 .7.4.1. nodes 资源 .7.4.2. pods 资源 .7.4.3. deployments 资源 .7.4.4. daemonsets 资源 .7.4.5. services 资源 .7.4.6. 清理垃圾 .8. 关于作者 .1. k1s 是 kubectl 辅助工具 so easy, so fast.</description>
    </item>
    
    <item>
      <title>云运维笔记(5) Kubernetes GPU 支持与驱动安装</title>
      <link>https://yezihack.github.io/posts/k8s-gpu/</link>
      <pubDate>Wed, 23 Nov 2022 08:42:25 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/k8s-gpu/</guid>
      <description>.1. 安装 GPU 驱动 .1.1. 查看 GPU 硬件 .1.2. 检查自带 GPU 驱动 .1.3. 官方下载 GPU 驱动 .1.4. 安装 GPU 驱动 .1.5. 安装失败 .1.5.1. ERROR: An NVIDIA kernel module &amp;rsquo;nvidia-uvm&amp;rsquo; appears to already be loaded in your kernel .1.5.2. ERROR: Unable to find the kernel source tree for the currently running kernel .1.6. 重装内核 .1.7. 再次安装 GPU 驱动包 .1.7.1. 安装 .run 文件 .1.7.2. 安装 .rpm 文件 .2. 安装 nvidia-container-runtime .2.1. 作用 .</description>
    </item>
    
    <item>
      <title>云运维笔记(4) Kubeadm etcd 堆叠式安装 k8s 1.20</title>
      <link>https://yezihack.github.io/posts/kubeadm-install-v1.20/</link>
      <pubDate>Mon, 14 Nov 2022 18:27:51 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/kubeadm-install-v1.20/</guid>
      <description>.1. 回顾 .2. 安装前的准备 .2.1. 安装要求 .2.2. 集群规划 .2.3. 版本选择 .2.4. 基本设置 .3. Kubernetes 设置的参数 .3.1. br_netfilter 模块 .3.2. 桥接的IPv4流量传递到iptables的链 .3.3. 加载 IPVS .4. Docker 部署 .4.1. 设置 Docker 镜像源 .4.2. 列出 Docker 所有的版本 .4.3. 安装 docker .4.4. 设置 daemon.json .4.4.1. 设置CPU .4.4.2. 支持GPU .4.5. 启动 docker .5. 设置 firewall 防火墙规则 .5.1. k8s master需要开启以下端口 .5.2. k8s node需要开启以下端口 .5.3. 打开 NAT 转发功能 .5.4. calico 需要开启以下端口 .5.5. NFS 防火墙规则设置 .5.6. 其它端口 .</description>
    </item>
    
    <item>
      <title>云运维笔记(3) k8s 安装 dashboard 配置 ingress</title>
      <link>https://yezihack.github.io/posts/k8s-dashboard-ingress/</link>
      <pubDate>Tue, 08 Nov 2022 16:47:30 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/k8s-dashboard-ingress/</guid>
      <description>.1. 回顾 .2. 下载对应的版本 .3. 生成自签名的证书 .4. 生成 secret .5. 修改 dashboard.yaml 文件 .6. 部署 Dashboard .7. 创建 token .7.1. 创建 admin token .7.2. 创建某空间的 token .8. 配置 ingress-nginx .9. dashboard 登陆使用 .10. 参考 .11. 关于作者 .1. 回顾 之前写过一篇 kuberntes-dashboard 的文章，介绍如何使用 nodeport 方式部署与访问。
参考：第十一章 Kubernetes Dashboard
本次介绍使用 ingress 域名方式访问 dashboard。
采用 tls 方式配置 ingress-nginx 访问 dashboard。 .2. 下载对应的版本 访问 github 仓库：https://github.com/kubernetes/dashboard/
如何安装合适自己 kuberntes 版本的 Dashboard 的呢？官方发布 release 时，每个版本都有测试，当前版本支持哪些范围的 kubernetes 版本。还特意列出不完全兼容的版本信息。</description>
    </item>
    
    <item>
      <title>云运维笔记(2) Kubeadm etcd 堆叠式安装 k8s 1.16</title>
      <link>https://yezihack.github.io/posts/kubeadm-install-v1.16/</link>
      <pubDate>Thu, 04 Aug 2022 10:40:28 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/kubeadm-install-v1.16/</guid>
      <description>.1. Kubeadm 高可用集群 本次安装 Kubernetes 采用官方推荐的 kubeadm 安装方式。
利用 kubeadm 创建高可用集群，使用 kubeadm 设置一个高可用的 Kubernetes 集群的两种不同方式：
使用具有堆叠的控制平面节点。这种方法所需基础设施较少。etcd 成员和控制平面节点位于同一位置。 使用外部集群。这种方法所需基础设施较多。控制平面的节点和 etcd 成员是分开的。 本次教程采用 etcd 堆叠式高可用集群，即将 etcd 与控制平面的节点在同一个位置。
.2. 安装前的准备 .2.1. 安装要求 在开始安装 kubernetes 集群机器之前需要满足以下几上条件：
序列 名称 参考值 命令 1 系统 Linux uname -s 2 内存 &amp;gt;= 2 GB free -hm 3 CPU &amp;gt;= 2 核 cat /proc/cpuinfo |grep &amp;ldquo;processor&amp;rdquo;|wc -l 4 硬盘 &amp;gt;= 20 GB df -h 5 交换分区 必须禁用 swapoff / vim /etc/fstab 6 网络 集群中所有机器之间网络互通 ping 7 主机名 集群中所有机器不重复 hostname 8 MAC地址 集群中所有机器不重复 cat /sys/class/net/ens33/address 9 product_uuid 集群中所有机器不重复 cat /sys/class/dmi/id/product_uuid .</description>
    </item>
    
    <item>
      <title>云运维笔记(1) CentOS7 安装</title>
      <link>https://yezihack.github.io/posts/centos-install/</link>
      <pubDate>Wed, 03 Aug 2022 16:54:31 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/centos-install/</guid>
      <description>.1. 准备 CentOS7 镜像 .2. Vmware Workstation 安装 CentOS7 .3. 配置虚拟机网络 .4. 配置 CentOS 网络 .5. 更改 CentOS7 Yum源 .6. 安装常用的软件 .7. 安装 Oh-my-zsh .8. 克隆系统 .9. 关于作者 .1. 准备 CentOS7 镜像 使用清华大学开源镜像站下载 CentOS7: https://mirrors.tuna.tsinghua.edu.cn/centos/7/isos/x86_64/
CentOS-7-x86_64-DVD-2009.iso 标准安装版 CentOS-7-x86_64-Everything-2009.iso 完整版，集成所有软件 CentOS-7-x86_64-Minimal-2009.iso 精简版，自带的软件最少 CentOS-7-x86_64-NetInstall-2009.iso 网络安装版（从网络安装或者救援系统) 本次安装教程使用精简版镜像。因为无须图形界面，也无须自带太多的软件。
.2. Vmware Workstation 安装 CentOS7 操作相对比较简单，下一步即可。
新建虚拟机 选择镜像源 下一步 调整配置 内存调整为 2GB。 CPU调整为 2 个处理器，每个处理器内核数量为 2。 开启此虚拟机 .3. 配置虚拟机网络 网络规划：192.168.9.0/24 虚拟机采用 NAT 模式连接宿主机网络 菜单 -&amp;gt; 编辑 -&amp;gt; 虚拟网络编辑器：</description>
    </item>
    
  </channel>
</rss>
