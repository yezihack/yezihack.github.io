<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>每日一库 on</title><link>https://yezihack.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%BA%93/</link><description>Recent content in 每日一库 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Jan 2021 14:42:08 +0800</lastBuildDate><atom:link href="https://yezihack.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 优雅追踪堆栈错误包</title><link>https://yezihack.github.io/posts/go-library-error/</link><pubDate>Thu, 21 Jan 2021 14:42:08 +0800</pubDate><guid>https://yezihack.github.io/posts/go-library-error/</guid><description>Golang tracks stack error package. 优雅追踪堆栈错误包
安装(Install) go get github.com/yezihack/e 介绍(Introduction) github.com/yezihack/e 项目是一个优雅地追踪你的堆栈信息.方便存储日志里. 而且还扩展了error包,自定义 code,msg 信息.
特色(Features) 优雅地追踪堆栈错误信息
基于github.com/pkg/errors包进行封装 支持 code, msg 自定义错误码和错误信息 方便存储日志json文件 堆栈信息以人性化展示 文档(Documentation) https://godoc.org/github.com/yezihack/e
简单使用(Use) package main import ( &amp;#34;github.com/yezihack/e&amp;#34; &amp;#34;log&amp;#34; ) func foo() error { return e.New(&amp;#34;foo&amp;#34;) } func main() { err := foo() if err != nil { // 需要判断是否是自定义error, 否则无法输出堆栈信息. if e.Assert(err) { log.Println(e.Convert(err).ToStr()) // 输出字符串形式 log.Println(e.Convert(err).ToArr()) // 输出数组形式 } else { log.Println(err) // 系统的 error } } } 与原堆栈信息对比 github.</description></item><item><title>Go命令行下星号代替输入内容</title><link>https://yezihack.github.io/posts/gopass/</link><pubDate>Fri, 17 Apr 2020 19:34:16 +0800</pubDate><guid>https://yezihack.github.io/posts/gopass/</guid><description>(图片来自网络,有侵权,联系我删除)
当我们做命令行工具时, 遇到用户需要输入密码时, 常规处理是当字符串显示输入,这样并不是很好.应该像mysqld工具一样,输入密码时,以星号代替.对敏感数据进行脱敏处理.
今天要介绍一个golang这方面的包github.com/howeyc/gopass
代码实例使用 1. 当输入密码时,不显示任何信息 func GetPasswd() { fmt.Printf(&amp;#34;1.请输入密码:&amp;#34;) pass, err := gopass.GetPasswd() if err != nil { log.Fatalln(err) return } fmt.Println(&amp;#34;您输入的密码是:&amp;#34;, string(pass)) } 2. 当输入密码时,以星号*代替你输入的字符 func GetPasswdMasked() { fmt.Printf(&amp;#34;2.请输入密码:&amp;#34;) pass, err := gopass.GetPasswdMasked() if err != nil { log.Fatalln(err) return } fmt.Println(&amp;#34;您输入的密码是:&amp;#34;, string(pass)) } 3.你输入密码时,以星号*代替你输入的字符 func GetPasswdPrompt() {
pass, err := gopass.GetPasswdPrompt(&amp;#34;3.请输入密码:&amp;#34;, true, os.Stdin, os.Stdout)
if err != nil {
log.Fatalln(err)
return
}
fmt.Println(&amp;#34;您输入的密码是:&amp;#34;, string(pass))
} 效果 1.</description></item></channel></rss>