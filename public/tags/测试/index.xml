<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试 on 空树之空</title>
    <link>https://yezihack.github.io/tags/%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 测试 on 空树之空</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jul 2020 15:36:03 +0800</lastBuildDate><atom:link href="https://yezihack.github.io/tags/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ab 压测</title>
      <link>https://yezihack.github.io/posts/ab/</link>
      <pubDate>Tue, 07 Jul 2020 15:36:03 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/ab/</guid>
      <description>ab 简单使用 并发100, 请求数为1000次.
ab -c 100 -n 1000 http://localhost/test.html ab post json使用 -p 数据 -T 请求内容格式, 如json: application/json ab -c 100 -n 1000 -p data.json -T application/json http://localhost/1.html data.json
{&amp;#34;username&amp;#34;:&amp;#34;sgfoot.com&amp;#34;} 解读报告 ab压力测试报错 Benchmarking 192.168.1.10 (be patient)apr_socket_recv: Connection reset by peer (104) 以上错误, 说明192.168.1.10机器重设连接. 因为apr_socket_recv是操作系统内核的一个参数, 如果系统感应到大量的请求时,会降慢速度,对连接进行重置. 这是一种面对SYN flood攻击保护. 但是我们压测时需要关闭这个保护.
关闭保护
# vim /etc/sysctl.conf net.ipv4.tcp_syncookies = 0# sysctl -p </description>
    </item>
    
    <item>
      <title>Golang 单元测试/性能测试</title>
      <link>https://yezihack.github.io/posts/golang-test/</link>
      <pubDate>Tue, 30 Jun 2020 14:23:04 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/golang-test/</guid>
      <description>参考 Go 单元测试/性能测试
性能测试 go test -test.bench=. -test.benchmem 指定方法 go test -test.bench=MyFunc -test.benchmem cpu 性能分析 go test -test.bench=MyFunc -test.cpuprofile cpu.out 内存分析 go test -test.bench=MyFunc -test.memprofile mem.out goroutine 阻塞分析 go test -test.bench=MyFunc -test.blockprofile block.out ###　指定几个cpu分析
go test -test.bench=MyFunc -test.benchmem -test.cpu 1,2,4 </description>
    </item>
    
    <item>
      <title>pprof火焰图分析利器之压测</title>
      <link>https://yezihack.github.io/posts/benchmark/</link>
      <pubDate>Tue, 09 Jun 2020 11:21:11 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/benchmark/</guid>
      <description>Benchmark 新建测试文件 util.go文件
func GetMd5V(s string) string {h := md5.New()h.Write([]byte(s))return hex.EncodeToString(h.Sum(nil))}func SumMd5(s string) string {data := []byte(s)return fmt.Sprintf(&amp;#34;%x&amp;#34;, md5.Sum(data))} 以_test结尾的文件, 如util_test.go
func BenchmarkSumMd5(b *testing.B) {for i := 0; i &amp;lt; b.N; i++ {SumMd5(&amp;#34;1&amp;#34;)}}func BenchmarkGetMd5V(b *testing.B) {for i := 0; i &amp;lt; b.N; i++ {GetMd5V(&amp;#34;1&amp;#34;)}} 运行Benchmark函数 go test -bench=&amp;#34;.&amp;#34; -benchmem 输出结果 BenchmarkSumMd5-8 1719777 847 ns/op 64 B/op 3 allocs/opBenchmarkGetMd5V-8 1861362 644 ns/op 184 B/op 5 allocs/opPASSok openapi/app/util 4.</description>
    </item>
    
    <item>
      <title>Jmeter入门</title>
      <link>https://yezihack.github.io/posts/jmeter/</link>
      <pubDate>Fri, 05 Jun 2020 16:45:52 +0800</pubDate>
      
      <guid>https://yezihack.github.io/posts/jmeter/</guid>
      <description>安装 参考 https://blog.csdn.net/pengjiangchun/article/details/105419683
使用 切换成中文 新建&amp;quot;线程组&amp;quot; 配置&amp;quot;线程组&amp;quot; 设置Cookie Http请求 Http断言 填写请求的URl 填写报告 参考 https://zhuanlan.zhihu.com/p/142897766 https://blog.csdn.net/pengjiangchun/article/details/105419683 </description>
    </item>
    
  </channel>
</rss>
