<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工具 on 空樹之空的博客</title><link>/tags/%E5%B7%A5%E5%85%B7.html</link><description>Recent content in 工具 on 空樹之空的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;a href='https://www.sgfoot.com'>空樹之空&lt;/a></copyright><lastBuildDate>Thu, 17 Feb 2022 15:36:03 +0800</lastBuildDate><atom:link href="/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>查看 Linux 系统资源</title><link>/linux-system-info.html</link><pubDate>Thu, 17 Feb 2022 15:36:03 +0800</pubDate><guid>/linux-system-info.html</guid><description>1. 系统 1 2 3 4 5 6 uname -a # 查看系统版本全部信息 uname -r # 查看内核版本 hostname # 查看主机名称 cat /etc/redhat-release # 打印系统类型，只对红帽系统有用, 如 CentOS env # 显示环境变量 lspci #</description></item><item><title>Proxy</title><link>/proxy.html</link><pubDate>Tue, 09 Feb 2021 10:51:23 +0800</pubDate><guid>/proxy.html</guid><description>设置GIT代理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 查看当前代理设置 git config --global http.proxy git config --global https.proxy // 设置当前代理为 http://127.0.0.1:1080 或 socket5://127.0.0.1:1080 git config --global http.proxy &amp;#39;http://127.0.0.1:1080&amp;#39; git config --global https.proxy &amp;#39;http://127.0.0.1:1080&amp;#39; git config --global http.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; git config --global https.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; //</description></item><item><title>Jenkins 构建及回滚任务</title><link>/jenkins-build-rollback.html</link><pubDate>Wed, 03 Feb 2021 14:47:04 +0800</pubDate><guid>/jenkins-build-rollback.html</guid><description>以 golang 构建项目为例。 新建任务 输入一个任务名称 选择：构建一个自由风格的软件项目 可选：也可以复制已创建的任务 确定提交 配置 再次编辑刚创建的任务 描述 对</description></item><item><title>GitHub 徽章制作</title><link>/badge.html</link><pubDate>Fri, 22 Jan 2021 14:23:07 +0800</pubDate><guid>/badge.html</guid><description>很早前写过一篇关于Golang持续集成服务之Travis教程, 今天再写写关于 github 上常见的徽章是如何制作的. 让你的开源项目更高大上, 让你的代码也</description></item><item><title>鲁班工具之 Markdown 生成目录(一)</title><link>/toc.html</link><pubDate>Thu, 24 Dec 2020 17:06:46 +0800</pubDate><guid>/toc.html</guid><description>命令行对 markdown 生成目录结构, 主要解决 markdown 不自动生成目录的困扰. 即[TOC]不支持. 工具源码 https://github.com/ekalinin/github-markdown-toc.go 下载安装 1 2 3 4 5 $ wget https://github.com/ekalinin/github-markdown-toc.go/releases/download/1.1.0/gh-md-toc.linux.amd64.tgz $ tar xzvf gh-md-toc.linux.amd64.tgz gh-md-toc $ ./gh-md-toc --version 1.1.0 mac 1 brew install github-markdown-toc 使</description></item><item><title>Forgetting Curve</title><link>/forgetting-curve.html</link><pubDate>Fri, 20 Nov 2020 19:26:36 +0800</pubDate><guid>/forgetting-curve.html</guid><description>48天计划表 365天计划表(只显示部分) 下载 https://pan.baidu.com/s/1SNhx_N3mkELewuJdPiOj7w 密码:fdd7</description></item><item><title>linux 制作绿色安装包</title><link>/make-linux-green-soft.html</link><pubDate>Mon, 16 Nov 2020 17:51:10 +0800</pubDate><guid>/make-linux-green-soft.html</guid><description>绿色安装包的概念来自于 win 的概念, 也就是说无需安装即可使用软件. 即为绿色安装包. 在 linux 为了方便, 我们也需要制作绿色安装包, 方便相同系统之间的 copy. 即</description></item><item><title>Nginx 搭建静态服务器</title><link>/nginx-static.html</link><pubDate>Wed, 11 Nov 2020 17:34:48 +0800</pubDate><guid>/nginx-static.html</guid><description>快捷安装 nginx CentOS 安装 1 yum -y install nginx 源码安装 1 2 3 4 5 6 7 8 # 下载, 解包 wget http://nginx.org/download/nginx-1.19.4.tar.gz &amp;amp;&amp;amp; tar -zxvf nginx-1.19.4.tar.gz &amp;amp;&amp;amp; cd nginx-1.19.4 # 编译安装 ./configure --prefix=/usr/local/nginx --without-http_rewrite_module make &amp;amp;&amp;amp; make install # 建立软链 ln -s /usr/local/nginx/sbin/nginx /usr/sbin/ 配置静态服务器 yum 安</description></item><item><title>万能工具箱</title><link>/tools.html</link><pubDate>Thu, 29 Oct 2020 17:11:51 +0800</pubDate><guid>/tools.html</guid><description>脚本工具 名称 安装/下载 备注 检查 shell 工具 yum -y install ShellCheck 下载 能检查sh语法</description></item><item><title>Ab和curl使用</title><link>/ab_curl.html</link><pubDate>Thu, 30 Jul 2020 15:06:52 +0800</pubDate><guid>/ab_curl.html</guid><description>curl post json 如果多个头信息, 多次使用-H即可. 1 curl -H &amp;#34;Content-Type: application/json&amp;#34; -X POST --data &amp;#39;{&amp;#34;username:&amp;#34;:&amp;#34;abc&amp;#34;, &amp;#34;password&amp;#34;:&amp;#34;abc&amp;#34;}&amp;#39; http://www.github.com/login -H 请求头信息 -X 请求方式, GET, POST --data 数据 ab post json 1 ab -r -k -c 50 -n 100 -T &amp;#39;application/json&amp;#39; -p json.txt http://www.github.com/login json.txt 1 2 3 4 {</description></item><item><title>国内各类镜像(LST)</title><link>/mirror.html</link><pubDate>Fri, 17 Jul 2020 19:39:54 +0800</pubDate><guid>/mirror.html</guid><description>为什么使用镜像,因为你在一个特色的国度, 所以你需要镜像为你加速,为你的开发加油. github 镜像 GitClone README github镜像 直接搜索你要的库,请勿注册 码云gi</description></item><item><title>Ab 压测</title><link>/ab.html</link><pubDate>Tue, 07 Jul 2020 15:36:03 +0800</pubDate><guid>/ab.html</guid><description>ab 简单使用 并发100, 请求数为1000次. 1 ab -c 100 -n 1000 http://localhost/test.html ab post json使用 -p 数据 -T 请求内容格式, 如json: application/json 1 ab -c 100 -n 1000 -p data.json -T application/json http://localhost/1.html data.json 1 {&amp;#34;username&amp;#34;:&amp;#34;sgfoot.com&amp;#34;} 解读</description></item><item><title>MySQL 性能分析</title><link>/mysql-analysis.html</link><pubDate>Fri, 19 Jun 2020 19:13:48 +0800</pubDate><guid>/mysql-analysis.html</guid><description>MySQL 运行的状态 重点关注以下参数 1 2 3 4 show status like &amp;#39;Queries&amp;#39;; show status like &amp;#39;Threads_connected&amp;#39;; show status like &amp;#39;Threads_running&amp;#39;; show status like &amp;#39;Connection_errors_max_connections&amp;#39;; MySQL 运行线程 1 show processlist 开启慢查询日志 一、参数查询 slow_query_log 开启慢查询 1 2 3 4 5 6 7 8 mysql&amp;gt;</description></item><item><title>Supervisor进程守护工具</title><link>/supervisor.html</link><pubDate>Wed, 27 May 2020 14:46:37 +0800</pubDate><guid>/supervisor.html</guid><description>介绍 supervisor是python写的一个进程守护工具,非常实用,时时监听你的进程是否正常, 发现异常自动启动, 生产环境必备软件. 安装 CentOS Y</description></item><item><title>Golang持续集成服务之Travis教程</title><link>/golang-travis.html</link><pubDate>Fri, 24 Apr 2020 20:19:39 +0800</pubDate><guid>/golang-travis.html</guid><description>为什么使用集成服务呢 我们向github提交代码时, 我们得保证我们的代码是能运行的, 我们会写测试用例, 保证我们的代码功能能正常使用.常见大神们</description></item><item><title>github-webhook工具实现github自动构建</title><link>/github-webhook.html</link><pubDate>Fri, 24 Apr 2020 15:04:27 +0800</pubDate><guid>/github-webhook.html</guid><description>原理 当本地git push origin master向Github远程仓库提交代码时，可以通过配置github自带webhook向服务器发送请求， 利用githu</description></item><item><title>Window Subsystem Ubuntu</title><link>/window-subsystem-ubuntu.html</link><pubDate>Sat, 14 Mar 2020 22:36:14 +0800</pubDate><guid>/window-subsystem-ubuntu.html</guid><description>做开发的话,如果是从mac或linux转为window的用户,有很多不习惯需要一些使用linux的命令 而window虽然有powershel</description></item><item><title>Yapi入门笔记</title><link>/yapi-note.html</link><pubDate>Fri, 13 Mar 2020 13:08:13 +0800</pubDate><guid>/yapi-note.html</guid><description>什么是YAPI 写接口文档的软件, 支持RESTful, Mock假数据, 团队管理协作,非常方便好用.良心之作 内网安装 参考网上的教程吧. mac: https://www.cnblogs.com/yehuisir/p/12190446.html linux; https://www.jianshu.com/p/6c269d00bb38 安</description></item></channel></rss>