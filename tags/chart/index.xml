<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chart on 空树之空</title><link>https://yezihack.github.io/tags/chart/</link><description>Recent content in chart on 空树之空</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Nov 2023 18:44:25 +0800</lastBuildDate><atom:link href="https://yezihack.github.io/tags/chart/index.xml" rel="self" type="application/rss+xml"/><item><title>Helm 常用命令</title><link>https://yezihack.github.io/posts/helm-command/</link><pubDate>Wed, 29 Nov 2023 18:44:25 +0800</pubDate><guid>https://yezihack.github.io/posts/helm-command/</guid><description>1. 查看 Release # 查看当前 Default 命名空间下的 Release helm ls # 查看所有命名空间下的 Release helm ls -A # 查看指定命名空间下的 Release helm ls -n &amp;lt;namespace&amp;gt; 2. 部署 helm install &amp;lt;release-name&amp;gt; &amp;lt;helm-Repository&amp;gt; -f values.yaml helm install &amp;lt;release-name&amp;gt; &amp;lt;helm-Repository&amp;gt; --set name=xxx -f values.yaml 3. 仓库 helm - 针对Kubernetes的Helm包管理器 helm repo add - 添加chart仓库 helm repo index - 基于包含打包chart的目录，生成索引文件 helm repo list - 列举chart仓库 helm repo remove - 删除一个或多个仓库 helm repo update - 从chart仓库中更新本地可用chart的信息 4. 升级&amp;amp;卸载&amp;amp;回滚 # 升级 helm upgrade -f myvalues.</description></item><item><title>Helm Chart 模板</title><link>https://yezihack.github.io/posts/helm-template/</link><pubDate>Wed, 29 Nov 2023 18:44:17 +0800</pubDate><guid>https://yezihack.github.io/posts/helm-template/</guid><description>1. 介绍 Chart 模板才是 Helm 的灵魂所在,学会模板才算入门 Helm,让我们一起学习吧.
2. 模板语法 模板命令要括在 {{ 和 }} 之间。
如:
apiVersion: v1 kind: ConfigMap metadata: name: {{ .Release.Name }}-configmap data: myvalue: &amp;#34;Hello World&amp;#34; 3. 内置对象 系统自带一些内置对象,可以在模板里使用.
Release： Release对象描述了版本发布本身。包含了以下对象：
Release.Name： release名称 Release.Namespace： 版本中包含的命名空间(如果manifest没有覆盖的话) Release.IsUpgrade： 如果当前操作是升级或回滚的话，该值将被设置为true Release.IsInstall： 如果当前操作是安装的话，该值将被设置为true Release.Revision： 此次修订的版本号。安装时是1，每次升级或回滚都会自增 Release.Service： 该service用来渲染当前模板。Helm里始终Helm Values： Values对象是从values.yaml文件和用户提供的文件传进模板的。默认为空
Chart： Chart.yaml文件内容。 Chart.yaml里的所有数据在这里都可以可访问的。比如 {{ .Chart.Name }}-{{ .Chart.Version }} 会打印出 mychart-0.1.0
Files： 在chart中提供访问所有的非特殊文件的对象。你不能使用它访问Template对象，只能访问其他文件。 请查看这个 文件访问部分了解更多信息
Files.Get 通过文件名获取文件的方法。 （.Files.Getconfig.ini） Files.GetBytes 用字节数组代替字符串获取文件内容的方法。 对图片之类的文件很有用 Files.Glob 用给定的shell glob模式匹配文件名返回文件列表的方法 Files.</description></item><item><title>Helm 入门学习</title><link>https://yezihack.github.io/posts/helm-tutorial/</link><pubDate>Wed, 29 Nov 2023 16:23:40 +0800</pubDate><guid>https://yezihack.github.io/posts/helm-tutorial/</guid><description>1. 什么是 Helm Helm是一个Kubernetes的包管理工具，它可以帮助我们简化Kubernetes应用程序的部署和管理。使用Helm，可以将Kubernetes应用程序打包成易于安装、升级和卸载的chart包，并且可以在不同的Kubernetes环境中重复使用这些chart包。
2. Helm 三个概念 Chart 代表着 Helm 包，即模板代码的集合 Repository 用来存放和共享 charts 的地方 Release 运行在 Kubernetes 集群中的 chart 的实例 3. 安装 Helm 官方地址: https://github.com/helm/helm/releases # linux amd64 wget https://get.helm.sh/helm-v3.13.0-linux-amd64.tar.gz tar -zxvf helm-v3.13.0-linux-amd64.tar.gz cd linux-amd64 cp helm /usr/local/sbin 4. 快速入门 4.1. 添加 Repository 仓库 https://artifacthub.io/ # 添加 Helm Char 仓库 helm repo add bitnami https://charts.bitnami.com/bitnami # 查看添加的仓库列表 helm repo ls # 更新 charts 列表 helm repo update 4.2. 搜索 Chart # 搜索 charts 列表 helm search repo bitnami # 搜索指定的 charts 包名，如 nginx helm search repo nginx 4.</description></item></channel></rss>