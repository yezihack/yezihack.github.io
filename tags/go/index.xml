<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on 空樹之空的博客</title><link>/tags/go.html</link><description>Recent content in go on 空樹之空的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;a href='https://www.sgfoot.com'>空樹之空&lt;/a></copyright><lastBuildDate>Mon, 15 Mar 2021 20:13:44 +0800</lastBuildDate><atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Systemd 管理 Golang 进程</title><link>/systemd-golang.html</link><pubDate>Mon, 15 Mar 2021 20:13:44 +0800</pubDate><guid>/systemd-golang.html</guid><description>systemd 脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/bin/bash project_name=&amp;#34;mygo&amp;#34; project_path=&amp;#34;/data/backend/&amp;#34; exec_path=&amp;#34;${project_path}${project_name}&amp;#34; cat &amp;gt; /lib/systemd/system/${project_name}.service &amp;lt;&amp;lt; EOF [Unit] Description=mygo systemd Documentation=https://www.sgfoot.com After=network.target [Service] Type=simple User=root # 启动命令 ExecStart=${exec_path} # 重启命令 ExecReload=/bin/kill -SIGINT # 环境变量 Environment=&amp;#34;SGFOOT_ENV=pro&amp;#34;</description></item><item><title>Golang err is shadowed during return</title><link>/fix-golang-return.html</link><pubDate>Thu, 24 Dec 2020 16:11:38 +0800</pubDate><guid>/fix-golang-return.html</guid><description>复现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import &amp;#34;errors&amp;#34; func main() { TestErr(&amp;#34;go&amp;#34;, &amp;#34;golang&amp;#34;) } func TestErr(t, p string) (s string, err error) { switch t { case &amp;#34;go&amp;#34;: err := check(p) if err != nil { // 返回参数里的 err 作</description></item><item><title>Go Mod 引用私有仓库</title><link>/go-mod-private.html</link><pubDate>Fri, 30 Oct 2020 16:01:25 +0800</pubDate><guid>/go-mod-private.html</guid><description>在做 go 开发, 如果是使用 go1.11 版本, 相信大家都会使用到 go mod 做为依赖管理, 因为 go mod 可以设置代理,国外的包,轻松下载. 但是在某一天你使用公司自建的 gitlab ,</description></item><item><title>Go 并发</title><link>/go-concurrence.html</link><pubDate>Thu, 06 Aug 2020 12:01:45 +0800</pubDate><guid>/go-concurrence.html</guid><description>golang 天生语言层面支持并发, 非常棒的语言, 有时我们业务开发时, 遇到复杂场景, 需要用于并发, 将多个请求使用协程组完成并发, 当遇到嵌套循环,还存在上</description></item><item><title>Go Package优秀的包</title><link>/go-package.html</link><pubDate>Wed, 13 May 2020 14:40:23 +0800</pubDate><guid>/go-package.html</guid><description>Go 资源汇总 文件 微服务 缓存 日志&amp;amp;调试 池 WEB框架 测试框架 配置 唯一ID 网络 工具包 Go 资源汇总 收集的资源大而全，提供更多选择，更大视野。 Github 描</description></item></channel></rss>