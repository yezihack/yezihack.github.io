<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>curl on 空树之空</title><link>https://yezihack.github.io/tags/curl/</link><description>Recent content in curl on 空树之空</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Jul 2020 15:06:52 +0800</lastBuildDate><atom:link href="https://yezihack.github.io/tags/curl/index.xml" rel="self" type="application/rss+xml"/><item><title>Ab和curl使用</title><link>https://yezihack.github.io/posts/ab_curl/</link><pubDate>Thu, 30 Jul 2020 15:06:52 +0800</pubDate><guid>https://yezihack.github.io/posts/ab_curl/</guid><description>curl post json 如果多个头信息, 多次使用-H即可.
curl -H &amp;#34;Content-Type: application/json&amp;#34; -X POST --data &amp;#39;{&amp;#34;username:&amp;#34;:&amp;#34;abc&amp;#34;, &amp;#34;password&amp;#34;:&amp;#34;abc&amp;#34;}&amp;#39; http://www.github.com/login -H 请求头信息 -X 请求方式, GET, POST --data 数据 ab post json ab -r -k -c 50 -n 100 -T &amp;#39;application/json&amp;#39; -p json.txt http://www.github.com/login json.txt
{ &amp;#34;username&amp;#34;:&amp;#34;abc&amp;#34;, &amp;#34;password&amp;#34;:&amp;#34;1234&amp;#34; } -T就Content-Type -H 自定义头信息 Token:111 -c 请求并发数 -n 请求数. -r 不要退出套接字接收错误 -k 保持 KeepAlive</description></item><item><title>golang http句柄泄露</title><link>https://yezihack.github.io/posts/curl/</link><pubDate>Thu, 11 Jun 2020 14:36:27 +0800</pubDate><guid>https://yezihack.github.io/posts/curl/</guid><description>前言 平时我们做Web开发, 经常会遇到需要请求网络资源,使用http请求, 如下面代码,注释处如果没有打开话,会导致句柄泄露, 最终报: dial tcp 127.0.0.1:80: socket: too many open files 这是为什么呢? 在linux中万物皆文件, 网络请求也相当于打开一个文件.如果打开文件忘记关闭的话, 没有及时回收资源, linux有文件打开上限,可以使用ulimit -n 查看最大支持文件打开数.
如下代码会导致句柄泄露 cli := &amp;amp;http.Client{} req, err := http.NewRequest(http.MethodGet, &amp;#34;http://www.google.com&amp;#34;, nil) if err != nil { return } resp, err := cli.Do(req) if err != nil { return } // 必须关闭, 如果我们没有写关闭resp.Body打开的句柄,就会导致句柄泄露 // defer resp.Body.Close() // data, err := ioutil.ReadAll(resp.Body) if err != nil { return } fmt.Println(string(data)) return 分析 可以使用并发工具请求你的代码, 如使用Jmeter, 然后使用lsof -p 18001 |wc -l , 18001就你程序的进程ID, 可以查看当前程序打开文件数.</description></item><item><title>Goz学习笔记</title><link>https://yezihack.github.io/posts/goz/</link><pubDate>Tue, 28 Apr 2020 20:33:51 +0800</pubDate><guid>https://yezihack.github.io/posts/goz/</guid><description>分析 项目四个Go文件, 每个文件仅描述一件事, 思路非常清淅, 故此学习并总结一下里面的精华.
定义Options结构体接受外部定义的配置 定义入口文件, 整个项目的入口, 并返回一个下一层处理的结构体 定义逻辑结构体, 下一层结构体担负着处理逻辑的任务,并返回处理结构的结构体. 定义收尾结构体, 将上一层的处理的结果进行进一步分析,最终展现给用户 入口文件 Goz.go 只初使化了Request结构体. 可以定义初使配置Options, 整个项目所需的配置都在Options结构里 options.go#L6 // NewClient new request object func NewClient(opts ...Options) *Request { req := &amp;amp;Request{} if len(opts) &amp;gt; 0 { req.opts = opts[0] } return req } 配置文件 Options.go 定义了整个项目需要的外部参数 变量首字母都大写 options.go#L6 // Options object type Options struct { BaseURI string Timeout float32 timeout time.Duration Query interface{} Headers map[string]interface{} Cookies interface{} FormParams map[string]interface{} JSON interface{} Proxy string } 核心处理文件 Request.</description></item></channel></rss>