<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>教程 on 空樹之空的博客</title><link>/tags/%E6%95%99%E7%A8%8B.html</link><description>Recent content in 教程 on 空樹之空的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;a href='https://www.sgfoot.com'>空樹之空&lt;/a></copyright><lastBuildDate>Fri, 24 Sep 2021 17:05:06 +0800</lastBuildDate><atom:link href="/tags/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Prometheus: Grafana 监控 Node Exporter 主机</title><link>/node-exporter.html</link><pubDate>Fri, 24 Sep 2021 17:05:06 +0800</pubDate><guid>/node-exporter.html</guid><description>node_exporter 安装 监控远程 linux 服务器CPU、内存、磁盘、I/O等信息 下载慢，请查看软件下载列表 https://prometheus.io/download/ 1 2 3 4 5 6 cd /usr/local/src wget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz tar -zxvf node_exporter-1.0.1.linux-amd64.tar.gz -C /usr/local/ cd /usr/local/ mv node_exporter-1.0.1.linux-amd64 node_exporter cd node_exporter 运行 先创建 systemd 服</description></item><item><title>Prometheus: 安装</title><link>/prometheus-install.html</link><pubDate>Fri, 24 Sep 2021 17:04:51 +0800</pubDate><guid>/prometheus-install.html</guid><description>.1. 安装 .1.1. 下载 .1.2. 运行 .1.3. 预览 .1.4. nginx 反向代理 .2. Docker 安装 .3. 关于作者 .1. 安装 .1.1. 下载 prometheus提供二进制,直接解压即可用.由 go 编写 官网下载: https://prometheus.io/download/ Centos 64x 选</description></item><item><title>再述 SOLID 原则</title><link>/again-solid.html</link><pubDate>Thu, 06 May 2021 16:40:10 +0800</pubDate><guid>/again-solid.html</guid><description>再述 SOLID 原则，因为这些原则是设计模式的基石，所有的模式都是基于这些原则展开的。 单一职责原则 经典定义：应该有且仅有一个原因引起”类“的变更。(不</description></item><item><title>Docker 安装 php 环境</title><link>/docker-php.html</link><pubDate>Tue, 06 Apr 2021 11:38:33 +0800</pubDate><guid>/docker-php.html</guid><description>php 环境需要与 nginx 配合安装，共享 nginx 解析的目录(www) 基本参数 -d 后台启动 --name 定义一个别名 -v 挂载目录 --link 链接其它 docker 容器名称 安装 php 即安装 php-fpm 环境 docker search php 1 docker</description></item><item><title>Docker笔记(七) 安装 Redis</title><link>/docker-redis.html</link><pubDate>Tue, 23 Mar 2021 11:49:46 +0800</pubDate><guid>/docker-redis.html</guid><description>下载镜像 1 2 docker search redis docker pull redis # 下载最新的 redis 安装脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47</description></item><item><title>设计模式-设计原则与思想总结(二十)</title><link>/gof-think-summary.html</link><pubDate>Fri, 26 Feb 2021 21:12:54 +0800</pubDate><guid>/gof-think-summary.html</guid><description>编写高质量代码 代码质量评判标准 面向对象 设计原则 规范与重构 以上脑图来自极客时间 关于我 我的博客：https://www.sgfoot.com 欢迎</description></item><item><title>设计模式-重构-15条编程规范(十九)</title><link>/gof-refactor-4.html</link><pubDate>Mon, 22 Feb 2021 19:48:31 +0800</pubDate><guid>/gof-refactor-4.html</guid><description>为什么要编程规范 构建一个大型项目，往往是很多人一起参与，堆砌的代码行数都是成千上万行。如何保证代码的健壮性？编程规范必不可少。 命名 命名能力体</description></item><item><title>设计模式-重构-解耦(十八)</title><link>/gof-refactor-3.html</link><pubDate>Sat, 20 Feb 2021 21:22:55 +0800</pubDate><guid>/gof-refactor-3.html</guid><description>解耦为何如此重要 解耦是保证代码的松耦合，高内聚。防止代码质量腐化到不可救药地步的有效手段。 代码”高内聚，松耦合“也就意味着，代码结构清晰，分</description></item><item><title>设计模式-重构-单元测试(十七)</title><link>/gof-refactor-2.html</link><pubDate>Fri, 19 Feb 2021 21:06:22 +0800</pubDate><guid>/gof-refactor-2.html</guid><description>什么是单元测试 单元测试是代码层面的测试，由研发自己来编写，用于测试“自己”编写的代码逻辑的正确性。 单元测试主要测试范围： 类 函数 单元测试有别于</description></item><item><title>设计模式-重构(十六)</title><link>/gof-refactor-1.html</link><pubDate>Thu, 18 Feb 2021 19:48:20 +0800</pubDate><guid>/gof-refactor-1.html</guid><description>纲要 3W1H why 为什么重构 what 重构什么 when 什么时候重构 how 如何重构 重构的定义 软件设计大师 Martin Fowler 这样定义重构： “重构是一种对软件内部结构的改善，目的是在不改变</description></item><item><title>设计模式-通用系统开发(十五)</title><link>/gof-common-dev.html</link><pubDate>Wed, 10 Feb 2021 17:37:59 +0800</pubDate><guid>/gof-common-dev.html</guid><description>针对非业务通用框架开发，需要做到尽量通用，适合百变的场景，做到良好的扩展。 需求分析 功能性需求分析 满足使用者的需求，尽量通用。 借助设计产品线框</description></item><item><title>设计模式-业务系统开发(十四)</title><link>/gof-business-dev.html</link><pubDate>Wed, 10 Feb 2021 15:13:23 +0800</pubDate><guid>/gof-business-dev.html</guid><description>纲要 完整的系统流程包括： 前期的需求沟通分析 中期的代码设计实现 后期的系统上线维护 需求分析 做为技术人员不仅仅是等着产品设计文档，线框图，照着实现</description></item><item><title>设计模式-KISS,YAGNI,DRY,LOD 原则(十三)</title><link>/gof-principle-other.html</link><pubDate>Mon, 08 Feb 2021 12:21:28 +0800</pubDate><guid>/gof-principle-other.html</guid><description>纲要 KISS原则 Keep It Simple and Stupid 尽量保持简单 代码行数越少就越“简单”吗？ 答案是否定的，实现逻辑需要简单，易维护，不过度优化 代码逻辑复杂就违背 Kiss 原则</description></item><item><title>设计模式-控制反转IOC.Go实例(十二)</title><link>/gof-ioc-code.html</link><pubDate>Mon, 08 Feb 2021 11:23:01 +0800</pubDate><guid>/gof-ioc-code.html</guid><description>控制反转(IOC) Inversion Of Control “控制”是指对程序执行流程的控制 ”反转“ 指没有使用框架之前，程序员自己控制整个程序的执行。在使用框架之后，整个程序的</description></item><item><title>设计模式-依赖注入DI.Go实例(十一)</title><link>/gof-di-code.html</link><pubDate>Mon, 08 Feb 2021 11:22:56 +0800</pubDate><guid>/gof-di-code.html</guid><description>依赖注入(DI) Dependency Injection 不通过 new() 的方式在类内部创建依赖类对象，而是将依赖的类对象在外部创建好之后，通过构造函数，函数参数等方式传递（或注入）给类</description></item><item><title>Docker笔记(六) 安装 PHPMyAdmin</title><link>/docker-phpmyadmin.html</link><pubDate>Wed, 03 Feb 2021 14:47:10 +0800</pubDate><guid>/docker-phpmyadmin.html</guid><description>开发项目涉及到 MySQL时就需要MySQL管理工具, phpmyadmin 是一款网页功能强大的免费软件。 安装 MySQL 命令方式： 1 docker run -itd --name dev_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql docker-compose.yml 方式： 1 2 3 4 5</description></item><item><title>设计模式-SOLID五大原则(十)</title><link>/gof-solid.html</link><pubDate>Mon, 25 Jan 2021 21:03:38 +0800</pubDate><guid>/gof-solid.html</guid><description>[TOC] SOLID原则包括单一职责，开闭原则，里氏替换原则，接口隔离原则，依赖倒置原则。 单一职责原则(SRP) SRP: Single Responsibility Principle A class or module should have a single repons</description></item><item><title>设计模式-充血模式(九)</title><link>/gof-ddd.html</link><pubDate>Thu, 14 Jan 2021 14:37:12 +0800</pubDate><guid>/gof-ddd.html</guid><description>充血模式即领域驱动设计(Domain Driven Design, 简称 DDD) 贫血模式 在之前我们写一篇关于贫血模式的文章, 点击查看. 贫血模式是目前主流的一种开发模式, 基于M</description></item><item><title>设计模式-接口组合(八)</title><link>/gof-interface-combination.html</link><pubDate>Mon, 11 Jan 2021 20:23:10 +0800</pubDate><guid>/gof-interface-combination.html</guid><description>有一种非常经典的设计原则: 组合优于继承, 多用组合少用继承 为什么少用继承 继承是面向对象的四大特性之一, 表示类之间的 is-a 关系. 支持多态特性, 可以解</description></item><item><title>设计模式-接口编程(七)</title><link>/gof-program-to-interface.html</link><pubDate>Mon, 11 Jan 2021 11:38:43 +0800</pubDate><guid>/gof-program-to-interface.html</guid><description>何为&amp;quot;接口&amp;quot;编程 基于接口而非实现编程. 英文: Program to an interface, not an implementation 这条原则是一条比较抽象,泛化的设计思想. 接口的本质: 接口就是一</description></item><item><title>设计模式-贫血模式(六)</title><link>/gof-mvc.html</link><pubDate>Fri, 08 Jan 2021 14:02:31 +0800</pubDate><guid>/gof-mvc.html</guid><description>贫血开发模式 传统的MVC结构分为: Model 层, Controller 层, View层. 而做为前后端分离的MVC变为后端被分为: Controller, Service, Model 层. Controller 层负责暴露接口给前端调用. Service 层</description></item><item><title>设计模式-封装,抽象,继承,多态的作用(五)</title><link>/gof-oop.html</link><pubDate>Thu, 07 Jan 2021 19:40:53 +0800</pubDate><guid>/gof-oop.html</guid><description>封装, 抽象, 继承, 多态 是面向对象编程语言的四大特性. 而它们又分别承担什么职责呢. 实际编程中起什么作用呢. 封装 (Encapsulation) 封装也称信息隐藏或者数据访问保</description></item><item><title>设计模式-学习地图(四)</title><link>/gof-map.html</link><pubDate>Mon, 04 Jan 2021 19:35:56 +0800</pubDate><guid>/gof-map.html</guid><description>学习之前先罗列一下学习框架地图. 方便今后的学习. 三种编程范式 面向过程 面向对象(最主流) 函数式编程(如go语言) 面向对象7大知识点 面向对象的四</description></item><item><title>设计模式-如何评价代码质量好坏?(三)</title><link>/gof-check-code.html</link><pubDate>Tue, 29 Dec 2020 20:56:04 +0800</pubDate><guid>/gof-check-code.html</guid><description>评价常用词汇 描述代码质量所有常用词汇 最常用的评价标准 评价属于主观, 主观的准确度与工程师自身经验有极大的关系. 接下来我们从以下几个维度评价代码</description></item><item><title>鲁班工具之 Markdown 生成目录(一)</title><link>/toc.html</link><pubDate>Thu, 24 Dec 2020 17:06:46 +0800</pubDate><guid>/toc.html</guid><description>命令行对 markdown 生成目录结构, 主要解决 markdown 不自动生成目录的困扰. 即[TOC]不支持. 工具源码 https://github.com/ekalinin/github-markdown-toc.go 下载安装 1 2 3 4 5 $ wget https://github.com/ekalinin/github-markdown-toc.go/releases/download/1.1.0/gh-md-toc.linux.amd64.tgz $ tar xzvf gh-md-toc.linux.amd64.tgz gh-md-toc $ ./gh-md-toc --version 1.1.0 mac 1 brew install github-markdown-toc 使</description></item><item><title>Docker笔记(五) 镜像管理</title><link>/docker-image.html</link><pubDate>Thu, 17 Dec 2020 13:12:31 +0800</pubDate><guid>/docker-image.html</guid><description>镜像是 Docker 三大核心概念中最重要的 Docker 三大核心: 镜像 容器 仓库 镜像介绍 Docker 运行容器前需要本地存在对应的镜像, 如果镜像不存在, Docker 会尝试远程仓库里拉取. 默</description></item><item><title>Prometheus: Grafana 监控 Ngnix</title><link>/ngnix-exporter.html</link><pubDate>Fri, 06 Nov 2020 17:41:55 +0800</pubDate><guid>/ngnix-exporter.html</guid><description>.1. 概述 .2. 安装 nginx-module-vts 模块 .2.1. 下载 nginx-module-vts 模块文件 .2.2. 重新编译 nginx .2.3. 配置 server 信息 .3. 安装 nginx-vts-exporter .3.1. 下载软件 .3.2. 解压&amp;amp;安装 .3.3. 制作 systemctl .3.4. 管理 nginx-exporter .3.5. 查看 metrics .4. 添加到 prometheus 数据源 .5. MySQL</description></item><item><title>Docker笔记(四) 容器管理</title><link>/docker-container.html</link><pubDate>Thu, 05 Nov 2020 15:28:01 +0800</pubDate><guid>/docker-container.html</guid><description>.1. 容器管理 - .1.1. 容器运行 - .1.2. 查看容器 - .1.3. 查看容器日志 - .1.4. 容器删除 - .1.5. 查看容器系统资源信息 - .1.6. 容器内部命令 - .1.7. 复制文件(相互) .2. 导入导出容器 - .2.1.</description></item><item><title>Docker笔记(三) 基础知识</title><link>/docker-base.html</link><pubDate>Wed, 04 Nov 2020 15:20:11 +0800</pubDate><guid>/docker-base.html</guid><description>.1. Docker 三大基础组件 .2. Docker 指令 Docker 三大基础组件 三个重要的概念 仓库(Repository) 镜像(Image) 容器(Container) 实例命令: docker run --name</description></item><item><title>Docker笔记(七) 命令</title><link>/docker-command.html</link><pubDate>Tue, 03 Nov 2020 19:49:09 +0800</pubDate><guid>/docker-command.html</guid><description>前面教程介绍过 docker 是 c/s 模式, 通过 client 命令 与 server 端进行交互, docker 有着强大的命令系统, 我们需要系统学习下. 基础的命令 查看版本 docker version 查看 docker 信息 会显示多少镜像</description></item><item><title>Go 实践教程-gRPC-流实例(八)</title><link>/tutorial-grpc-stream-simple.html</link><pubDate>Wed, 21 Oct 2020 14:20:48 +0800</pubDate><guid>/tutorial-grpc-stream-simple.html</guid><description>你将会学到 一个完整的gRPC流实例，包括单向流与双向流的操作 如何实现gRPC流服务端代码 如何实现gRPC流客户端代码 准备 新建一个文件夹 go-grpc-simple-stream 在g</description></item><item><title>Go 实践教程-gRPC-简单实例(七)</title><link>/tutorial-grpc-simple.html</link><pubDate>Wed, 21 Oct 2020 14:20:39 +0800</pubDate><guid>/tutorial-grpc-simple.html</guid><description>你将会学到 一个完整的gRPC实例 如何实现gRPC服务端代码 如何实现gRPC客户端代码 准备 新建一个文件夹 go-grpc-simple 在go-grpc-simple文件夹</description></item><item><title>Go 实践教程-gRPC-Protobuf(六)</title><link>/tutorial-grpc-protobuf.html</link><pubDate>Wed, 21 Oct 2020 14:20:32 +0800</pubDate><guid>/tutorial-grpc-protobuf.html</guid><description>Protobuf 是 Protobuf Buffers 的简称，它是 Google 公司开发的一种数据描述语言，并于2008年开源。 可用作为设计安全的跨语言 RPC 接口的基础工具。 目前 Protobuf 已经发展到第3版本，即</description></item><item><title>Go 实践教程-gRPC-简介(五)</title><link>/tutorial-grpc-base.html</link><pubDate>Wed, 21 Oct 2020 14:18:34 +0800</pubDate><guid>/tutorial-grpc-base.html</guid><description>什么是gRPC RPC 是远程过程调用 (Remote Procedure Call)的缩写。在 RPC 中，客户端应用程序可以直接调用不同机器上的服务器应用程序上的方法，就像它是本地对象一</description></item><item><title>Docker笔记(二) 安装</title><link>/docker-install.html</link><pubDate>Thu, 15 Oct 2020 17:12:16 +0800</pubDate><guid>/docker-install.html</guid><description>适合于 CentOS 系统 docker 一键安装 1 curl -sSL https://cdn.jsdelivr.net/gh/yezihack/assets/sh/docker-install.sh |sudo sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #!/bin/bash ################ # CentOS 一键安装 # From: sgfoot.com ################# # 卸载</description></item><item><title>Docker笔记(一) 原理</title><link>/docker-theory.html</link><pubDate>Wed, 14 Oct 2020 18:11:18 +0800</pubDate><guid>/docker-theory.html</guid><description>什么是docker Docker 是 dotCloud 公司开源的一款产品，2013年开源(基于golang开发)。 Docker 英文意思是“搬运工&amp;quot;, 是一种容器化技术，将您</description></item><item><title>Go 实践教程-基本语法(四)</title><link>/tutorial-golang-base.html</link><pubDate>Tue, 29 Sep 2020 17:29:55 +0800</pubDate><guid>/tutorial-golang-base.html</guid><description>本篇主要介绍，基本数据类型、控制语句和数据结构及函数、方法、接口等知识。为后面学习打下基础，有个基本的认识。也为您将来进阶做准备。 基础语法 之</description></item><item><title>Go 实践教程-工具及运行(三)</title><link>/tutorial-golang-runing.html</link><pubDate>Wed, 16 Sep 2020 16:45:10 +0800</pubDate><guid>/tutorial-golang-runing.html</guid><description>经过前面二篇 Go 简介,Go 环境配置 学习，大家对 Golang 有个大概的了解了， 环境也配置好了，就差上手写代码啦，今天主要介绍 Golang 的开发工具与工具链，如何写出</description></item><item><title>Go 实践教程-安装及环境配置(二)</title><link>/tutorial-golang-install.html</link><pubDate>Fri, 11 Sep 2020 18:10:11 +0800</pubDate><guid>/tutorial-golang-install.html</guid><description>本教程基于 Go1.11版本展开， 也就是官方提供 Go Module 功能。 安装 Golang 国内推荐下载点 Go 语言中文网 ，默认大家使用 CPU Amd 64 架构 最新版本：go1.15.2 Window</description></item><item><title>Go 实践教程-简介(一)</title><link>/tutorial-golang-info.html</link><pubDate>Fri, 11 Sep 2020 18:10:03 +0800</pubDate><guid>/tutorial-golang-info.html</guid><description>为什么写这个教程 Golang在中国发展非常不错，国内关于 Golang 的书籍也挺多，网上的 Golang 教程也不在少数。为什么我还要重复造这个轮子呢？我自学 Golang 也是看</description></item><item><title>Prometheus: Grafana 监控 MySQL</title><link>/mysqld_exporter.html</link><pubDate>Wed, 02 Sep 2020 11:02:44 +0800</pubDate><guid>/mysqld_exporter.html</guid><description>mysqld_exporter 安装 下载慢，请查看软件下载列表 https://prometheus.io/download/ 1 2 3 4 cd /usr/local/src/ wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.darwin-amd64.tar.gz tar -zxvf mysqld_exporter-0.12.1.darwin-amd64.tar.gz -C /usr/local/ mv /usr/local/mysqld_exporter-0.12.1.darwin-amd64 /usr/local/mysqld_exporter 创建 .my.cnf 文件 host 主机地址 user mysql名称 password mysql密码 1 2 3 4 5 6 cat &amp;gt; /usr/local/mysqld_exporter/.my.cnf &amp;lt;&amp;lt; EOF</description></item><item><title>Prometheus: Grafana 入门</title><link>/grafana.html</link><pubDate>Mon, 31 Aug 2020 20:29:51 +0800</pubDate><guid>/grafana.html</guid><description>.1. 简介 Grafana是一个开源的度量分析和可视化工具，可以通过将采集的数据分 析，查询，然后进行可视化的展示,并能实现报警 官网：https:/</description></item><item><title>Prometheus: 入门</title><link>/prometheus.html</link><pubDate>Mon, 31 Aug 2020 10:59:18 +0800</pubDate><guid>/prometheus.html</guid><description>基于 CentOS 7 amd64 系统 Prometheus 多维数据模型（有metric名称和键值对确定的时间序列） 灵活的查询语言 不依赖分布式存储 通过pull方式采集时间序列，通过ht</description></item><item><title>设计模式-七大原则(二)</title><link>/gof-seven-principle.html</link><pubDate>Wed, 19 Aug 2020 13:00:55 +0800</pubDate><guid>/gof-seven-principle.html</guid><description>用最少的语言记住更多的东西 本文提纲 设计模式的目的 高内聚，低耦合 可重用性 可扩展性 可阅读性 可靠性 1. 单一职责原则(SRP) 单一职责原则提出了一个编</description></item><item><title>设计模式-简介(一)</title><link>/gof.html</link><pubDate>Wed, 19 Aug 2020 11:39:20 +0800</pubDate><guid>/gof.html</guid><description>什么是设计模式 设计模式 (Design pattern) 代表了最佳实践 通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解</description></item></channel></rss>