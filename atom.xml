<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yezihack.github.io</id>
    <title>空树之空</title>
    <updated>2023-09-29T11:36:46.789Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yezihack.github.io"/>
    <link rel="self" href="https://yezihack.github.io/atom.xml"/>
    <subtitle>坚持自己的梦</subtitle>
    <logo>https://yezihack.github.io/images/avatar.png</logo>
    <icon>https://yezihack.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 空树之空</rights>
    <entry>
        <title type="html"><![CDATA[# 算法第1天: 缺失的第一个正数]]></title>
        <id>https://yezihack.github.io/post/algo-1-day.html/</id>
        <link href="https://yezihack.github.io/post/algo-1-day.html/">
        </link>
        <updated>2023-09-28T14:56:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="感触">感触</h1>
<p>为了坚持学习算法, 每篇算法标题写上坚持多少天,以此鼓励自己坚持学下去.<br>
会把自己理解的都写在代码处, 你在看代码时也方便, 为什么这一行这么写.<br>
也是锻炼自己的文档水平.</p>
<h2 id="题目">题目</h2>
<blockquote>
<p>LeetCode:41题, 困难</p>
</blockquote>
<pre><code>给定一个未排序的整数数组，找出其中没有出现的最小的正整数。
示例 1:
输入: [1,2,0]
输出: 3

示例 2:
输入: [3,4,-1,1]
输出: 2

示例 3:
输入: [7,8,9,11,12]
输出: 1
</code></pre>
<p>要求: 你的算法的时间复杂度应为O(n)，并且只能使用常数级别的空间</p>
<hr>
<h2 id="解法一-利用mapfor-range实现">解法一: 利用map+for-range实现</h2>
<blockquote>
<p>Time: O(n), Space:O(n)不符合题目要求</p>
</blockquote>
<pre><code class="language-go">//解法一: 利用map+for-range实现.时间复杂度O(n), 空间是常数O(n)
//	4 ms	2.8 MB
func FirstMissingPositive(nums []int) int {
	hash := make(map[int]struct{}, len(nums))
	for i := 0; i &lt; len(nums); i++ {
		hash[nums[i]] = struct{}{}
	}
	fmt.Println(hash)
	//1-n之间检查, 如果有缺失则是最小值.
	for i := 1; i &lt;= len(nums); i++ { //从1循环到n, 包含n
		if _, ok := hash[i]; !ok {
			return i
		}
	}
	//如果都不在hash里面的话,则是长度+1
	return len(nums) + 1
}
</code></pre>
<h2 id="解法二-原地桶排序符合要求">解法二: 原地桶排序(符合要求)</h2>
<p>Time: O(n), Space:O(1)</p>
<p>最小整数大于等于1, 小于的都不符合.也就是说:数字1,应该存放在0下标, 数字2存放在1的位置<br>
如果不符合的元素,再进行遍历一遍: 条件: 数字==数字-1(下标),如果不符合则就是缺失的最小整数的元素<br>
[4, 2, -1, 1]. 进行调整: [1, 2, -1, 4]. 发现只有-1与他所在的下标不符合.即是缺失的最小整数.</p>
<pre><code class="language-go">//解题: 原地桶排序
//最小整数大于等于1, 小于的都不符合.也就是说:数字1,应该存放在0下标, 数字2存放在1的位置
//如果不符合的元素,再进行遍历一遍: 条件: 数字==数字-1(下标),如果不符合则就是缺失的最小整数的元素
//[4, 2, -1, 1]. 进行调整: [1, 2, -1, 4]. 发现只有-1与他所在的下标不符合.即是缺失的最小整数.
func FirstMissingPositiveV2(nums []int) int {
	l := len(nums)
	for i := 0; i &lt; l; i++ {
		for nums[i] &gt; 0 /*最小正整数必须大于0*/ &amp;&amp;
			nums[i] &lt;= l /*最小正整数必须等于长度. 因为4的元素存放在3的下标*/ &amp;&amp;
			nums[i] != nums[nums[i]-1] /*元素与下标减1不符合则需要调整*/ {
			tmp := nums[i]        //元素存放在临时变量.
			nums[i] = nums[tmp-1] //寻找元素所处在下标正确的位置,如元素3应该存放在下标2的位置.
			nums[tmp-1] = tmp     //as above
			//也可以写成
			//nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]
		}
	}
	//调整好的位置, 可以查看结果, 缺失的位置.
	fmt.Println(nums)
	for i := 0; i &lt; l; i++ {
		if nums[i] != i+1 { //元素必须与下标i+1相等,才是元素所处的正常位置.如元素3应该存放在下标2的位置.
			return i + 1
		}
	}
	return l + 1
}

</code></pre>
<h2 id="查看完整源码">查看完整源码</h2>
<p><a href="https://github.com/yezihack/leetcode">https://github.com/yezihack/leetcode</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://yezihack.github.io/post/hello-gridea/</id>
        <link href="https://yezihack.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>